def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    pullout.loc[(pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'), 'RECEP_FLG'] = 'X'
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        # Use highest FKIMG per con_date
        future_pullout = future_pullout.sort_values('FKIMG', ascending=False)
        future_pullout = future_pullout.drop_duplicates(subset=['buyer_article_no', 'con_date'], keep='first')
        fkimg_list = future_pullout['FKIMG'].tolist()
        con_date_list = future_pullout['con_date'].tolist()

        group = group[group['delivery_date'] >= today]
        group.reset_index(inplace=True)
        month_git_qty = {}
        month_next_git_qty = {}
        month_assignment_map = {}

        delivery_months = group['delivery_date'].dt.to_period('M').unique().tolist()
        for i, month in enumerate(delivery_months):
            if i == 0:
                month_git_qty[month] = sum(fkimg_list)
            elif i < len(fkimg_list):
                month_git_qty[month] = int(fkimg_list[i - 1])
            else:
                month_git_qty[month] = 0

        for i, month in enumerate(delivery_months):
            current_qty = month_git_qty[month]
            next_qty = month_git_qty[delivery_months[i + 1]] if i + 1 < len(delivery_months) else 0
            month_next_git_qty[month] = current_qty - next_qty

        # Build con_date assignment map
        assigned_indices = set()
        for fkimg, con_dt in zip(fkimg_list, con_date_list):
            month = con_dt.to_period('M')
            month_rows = group[(group['delivery_date'].dt.to_period('M') == month)]
            eligible_rows = month_rows[month_rows['delivery_date'] < con_dt]
            eligible_rows = eligible_rows[~eligible_rows['index'].isin(assigned_indices)]

            if not eligible_rows.empty:
                max_idx = eligible_rows['index'].max()
                for idx in eligible_rows['index']:
                    month_assignment_map[idx] = {
                        'next_git_wh_qty': fkimg,
                        'next_git_wh_date': con_dt
                    }
                    assigned_indices.add(idx)

        previous_stock_val = stock_val

        for _, row in group.iterrows():
            idx = row['index']
            delivery_date = row['delivery_date']
            row_month = pd.Period(delivery_date, freq='M')
            git_qty = month_git_qty.get(row_month, 0)
            next_git_qty = month_next_git_qty.get(row_month, 0)

            assign = month_assignment_map.get(idx, {'next_git_wh_qty': 0, 'next_git_wh_date': pd.NaT})

            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = assign['next_git_wh_qty']
            supplyon.at[idx, 'next_git_wh_date'] = assign['next_git_wh_date']

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = previous_stock_val
            rec.git_qty = git_qty
            rec.next_git_wh_qty = assign['next_git_wh_qty']
            rec.next_git_wh_date = assign['next_git_wh_date']

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            update_records.append(rec)
            previous_stock_val = int(previous_stock_val + assign['next_git_wh_qty'] - row['delivery_quantity'])

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
