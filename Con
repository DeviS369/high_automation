def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)
    pullout.loc[(pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'), 'RECEP_FLG'] = 'X'
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})
    update_records = []
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) & 
            (pullout['RECEP_FLG'] != 'X') & 
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        fkimg_sum = future_pullout['FKIMG'].tolist()
        total_fkimg = int(sum(fkimg_sum))

        future_pullout = future_pullout.sort_values('FKIMG', ascending=False)
        future_pullout = future_pullout.drop_duplicates(subset=['buyer_article_no', 'con_date'], keep='first')

        fkimg_list = future_pullout['FKIMG'].tolist()
        con_date_list = future_pullout['con_date'].tolist()

        delivery_months = group[group['delivery_date'] >= today]['delivery_date'].dt.to_period('M').unique().tolist()
        month_git_qty = {}
        for i, month in enumerate(delivery_months):
            if i == 0:
                month_git_qty[month] = total_fkimg
            elif i < len(fkimg_list):
                month_git_qty[month] = int(fkimg_list[i - 1])
            else:
                month_git_qty[month] = 0

        month_next_git_qty = {}
        month_next_git_date = {}
        months = list(month_git_qty.keys())
        for i, month in enumerate(months):
            current_qty = month_git_qty[month]
            next_qty = month_git_qty[months[i + 1]] if i + 1 < len(months) else 0
            month_next_git_qty[month] = current_qty - next_qty
            month_next_git_date[month] = con_date_list[i + 1] if i + 1 < len(con_date_list) else pd.NaT

        previous_stock_val = stock_val
        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            if delivery_date < today:
                continue
            row_month = pd.Period(delivery_date, freq='M')
            git_qty = month_git_qty.get(row_month, 0)
            next_git_qty = month_next_git_qty.get(row_month, 0)
            con_date = month_next_git_date.get(row_month, pd.NaT)

            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = next_git_qty
            supplyon.at[idx, 'next_git_wh_date'] = con_date

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = previous_stock_val
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = con_date

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            update_records.append(rec)
            previous_stock_val = int(previous_stock_val + next_git_qty - row['delivery_quantity'])

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")    

def stock():
    data = {"IT_PULLOUT": []}
    supplyon, _ = call_data(supplyon_bmw, data)

    def safe_number(val, dtype=float):
        num = pd.to_numeric(val, errors='coerce')
        return dtype(num) if pd.notna(num) else dtype(0)

    update_records = []
    supplyon = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    today = pd.Timestamp.today()

    for index, row in supplyon.iterrows():
        try:
            delivery_date = pd.to_datetime(row['delivery_date'], errors='coerce')
            if pd.isna(delivery_date) or delivery_date >= today:
                continue

            article_no = row['buyer_article_no']
            warehouse_stock = safe_number(row.get('warehouse_stock'), int)
            blg_warehouse_stock = safe_number(row.get('blg_warehouse_stock'), int)
            despatch_qty = safe_number(row.get('delivery_quantity'), float)
            git_qty = safe_number(row.get('git_qty'), int)

            safety_stock_alm = warehouse_stock - blg_warehouse_stock
            short_fall_dem_qty = despatch_qty - blg_warehouse_stock
            tot_demand_qty_raise = safety_stock_alm + short_fall_dem_qty

            creation_date = pd.to_datetime(row.get('creation_date'), errors='coerce')
            if pd.notna(creation_date):
                del_date_days = (datetime.now() - creation_date).days
                demand_dt_prod = (datetime.now() - timedelta(days=100)).date()
                dem_sea = (datetime.now() - timedelta(days=70)).date()
                dem_air = (datetime.now() - timedelta(days=25)).date()
            else:
                demand_dt_prod = dem_sea = dem_air = None

            # Material Positioning Logic
            if blg_warehouse_stock > 0:
                mat_pos = 'Sufficient stock available in warehouse against call off'
            elif blg_warehouse_stock == 0 and git_qty > 0:
                mat_pos = 'Alert on GIT material - Not reported on time against call-off'
            elif blg_warehouse_stock == 0 and git_qty == 0:
                mat_pos = 'Stock not available - Plan for dispatch'
            else:
                mat_pos = None

            record = supplyon_bmw.objects.get(pk=row["id"])
            record.mat_pos = mat_pos
            record.demand_dt_prod = demand_dt_prod
            record.dem_sea = dem_sea
            record.dem_air = dem_air
            record.tot_demand_qty_raise = max(tot_demand_qty_raise, 0)
            record.safety_stock_alarm = max(safety_stock_alm, 0)
            record.short_fall_demand_qty = max(short_fall_dem_qty, 0)
            update_records.append(record)

        except Exception as e:
            print(f"Error processing row {row.get('id', 'unknown')}: {e}")

    if update_records:
        supplyon_bmw.objects.bulk_update(
            update_records,
            ["mat_pos", "demand_dt_prod", "dem_sea", "dem_air",
             "tot_demand_qty_raise", "safety_stock_alarm", "short_fall_demand_qty"]
        )

