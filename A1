def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean supplyon
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    # Clean pullout
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Mark past pullouts as received
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # Total BLG stock
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby(
        'buyer_article_no', as_index=False)['FKIMG'].sum().rename(columns={'FKIMG': 'total_blg'})

    update_records = []
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        # Get future pullouts
        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].copy()

        # Total FKIMG including duplicates
        total_fkimg = int(future_pullout['FKIMG'].sum())

        # Find FKIMGs that appear only once
        fkimg_counts = future_pullout['FKIMG'].value_counts()
        valid_fkimgs = fkimg_counts[fkimg_counts == 1].index
        future_pullout['is_valid_fkimg'] = future_pullout['FKIMG'].isin(valid_fkimgs)

        # Use only valid FKIMGs for planning
        plan_rows = future_pullout.loc[future_pullout['is_valid_fkimg']] \
            .sort_values(by=['con_date', 'FKIMG'], ascending=[True, False]) \
            .reset_index(drop=True)

        fkimg_list = plan_rows['FKIMG'].tolist()
        con_date_list = plan_rows['con_date'].tolist()

        # Get delivery months
        delivery_months = group[group['delivery_date'] >= today]['delivery_date'].dt.to_period('M').unique().tolist()

        def create_month_plan(fkimg_list, con_date_list, delivery_months):
            month_plan = {}
            for i, month in enumerate(delivery_months):
                if i == 0:
                    git_qty = total_fkimg
                    con_date = con_date_list[0] if con_date_list else pd.NaT
                    next_git_qty = git_qty - fkimg_list[0] if len(fkimg_list) > 0 else 0
                else:
                    if i < len(fkimg_list):
                        git_qty = fkimg_list[i - 1]
                        next_fkimg = fkimg_list[i] if i < len(fkimg_list) else 0
                        con_date = con_date_list[i] if i < len(con_date_list) else pd.NaT
                        next_git_qty = git_qty - next_fkimg
                    else:
                        git_qty = 0
                        next_git_qty = 0
                        con_date = pd.NaT
                month_plan[month] = (int(git_qty), int(next_git_qty), con_date)
            return month_plan

        month_plan = create_month_plan(fkimg_list, con_date_list, delivery_months)
        previous_stock_val = stock_val

        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            if delivery_date < today:
                continue
            row_month = pd.Period(delivery_date, freq='M')
            git_qty, next_git_qty, con_date = month_plan.get(row_month, (0, 0, pd.NaT))
            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = next_git_qty
            supplyon.at[idx, 'next_git_wh_date'] = con_date

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = previous_stock_val
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = con_date
            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0
            update_records.append(rec)

            previous_stock_val += next_git_qty - row['delivery_quantity']

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
