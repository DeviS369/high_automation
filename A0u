def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean supplyon
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    # Clean pullout
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Mark past pullouts as received
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'] = 'X'

    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    update_records = []
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        print(f"\nProcessing article: {article}, Initial BLG stock: {stock_val}, Delivery rows: {len(group)}")

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) & 
            (pullout['RECEP_FLG'] != 'X') & 
            (pullout['con_date'] > today)
        ].sort_values(by=['con_date', 'FKIMG'], ascending=[True, False]).reset_index(drop=True)

        if future_pullout.empty:
            print(f"No future pullout data for article {article}. Skipping.")
            continue

        con_date_list = future_pullout['con_date'].tolist()
        fkimg_counts = future_pullout['FKIMG'].value_counts()
        duplicate_fkimgs = fkimg_counts[fkimg_counts > 1].index
        future_pullout['is_unique_fkimg'] = ~future_pullout['FKIMG'].isin(duplicate_fkimgs)
        plan_rows = future_pullout.loc[future_pullout['is_unique_fkimg']].reset_index(drop=True)

        if plan_rows.empty:
            print(f"No unique FKIMG rows for article {article}. Skipping.")
            continue

        fkimg_list1 = plan_rows['FKIMG'].tolist()
        delivery_months = group[group['delivery_date'] >= today]['delivery_date'].dt.to_period('M').unique().tolist()

        if not delivery_months:
            print(f"No future delivery months for article {article}. Skipping.")
            continue

        def create_month_plan(fkimg_list1, con_date_list, delivery_months):
            month_plan = {}
            for i, month in enumerate(delivery_months):
                if i == 0:
                    git_qty = int(future_pullout['FKIMG'].sum())
                    con_date = con_date_list[0] if con_date_list else pd.NaT
                    next_git_qty = git_qty - fkimg_list1[0] if len(fkimg_list1) > 0 else 0
                else:
                    if i < len(fkimg_list1):
                        git_qty = fkimg_list1[i - 1]
                        next_fkimg = fkimg_list1[i] if i < len(fkimg_list1) else 0
                        con_date = con_date_list[i] if i < len(con_date_list) else pd.NaT
                        next_git_qty = git_qty - next_fkimg
                    else:
                        git_qty = 0
                        next_git_qty = 0 
                        con_date = pd.NaT
                month_plan[month] = (int(git_qty), int(next_git_qty), con_date)
            return month_plan

        month_plan = create_month_plan(fkimg_list1, con_date_list, delivery_months)
        previous_stock_val = stock_val

        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            if delivery_date < today:
                continue
            row_month = pd.Period(delivery_date, freq='M')
            git_qty, next_git_qty, con_date = month_plan.get(row_month, (0, 0, pd.NaT))

            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = next_git_qty
            supplyon.at[idx, 'next_git_wh_date'] = con_date

            try:
                rec = supplyon_bmw.objects.get(pk=row['id'])
            except supplyon_bmw.DoesNotExist:
                print(f"Record with ID {row['id']} not found in DB for article {article}")
                continue

            rec.blg_warehouse_stock = previous_stock_val
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = con_date

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0
            update_records.append(rec)

            print(f"Updated row ID {row['id']} with stock {previous_stock_val}, git_qty {git_qty}, next_git_qty {next_git_qty}")

            previous_stock_val += next_git_qty - row['delivery_quantity']

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"\n✅ Updated {len(update_records)} records successfully.")
    else:
        print("\n⚠️ No records updated.")

compute_blg_stock_final()
